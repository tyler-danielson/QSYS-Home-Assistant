-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "Home Assistant Control",
  Version = "0.2",
  BuildVersion = "1.0.0.1259",
  Id = "Home Assistant",
  Author = "Tyler Danielson",
  Description = "Plugin to provide Template Control of Home Assistant"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

local Colors = {
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  Yellow = {239,156,0},
  DarkGrey = {70,70,70}
}

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Home Assistant Control, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Setup"}  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  local function BuildPageNames()
    pagenames={"Setup"}
    table.insert(pagenames,"Lights")
    table.insert(pagenames,"Switches")
    return pagenames
  end
  
  
  for ix,name in ipairs( BuildPageNames()) do
    table.insert(pages, {name = pagenames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  --table.insert(ArrayOptions,"Other")
  
  props={
    {Name="Category Count",Type="integer",Min=1,Max=4,Value=4},
    {Name="Sources Per Page",Type="enum",Choices={"5","10"},Value="10"},
    {Name="Debug Print",Type="enum",Choices={"None","Tx/Rx","Tx","Rx","Function Calls","All"},Value="None"},
  }
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  
  --props['3x1'..' Template Btn '..1].IsHidden = true
  
  --props['Template 1'].IsHidden = props['Array Config'].Value ~= "3x1"
  --props['Template 1'].Value = props['Array Config'].Value
  
  --table.insert(props,#props,{Name="Template 1",Type="enum",Choices=TemplateOptions,Value="2x1"})
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  --[[table.insert( wiring, { "Audio Output", "main_mixer Output 1" } )]]--
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  local catCount = 5--props["Category Count"].Value
  
  
  ctrls={
    {Name="GetServices",ControlType="Button",ButtonType="Trigger",Count=1,UserPin=true,PinStyle="Input"},
    {Name="light_id",ControlType="Text",Count=10,UserPin=true,PinStyle="Both"},
    {Name="light",ControlType="Button",ButtonType="Toggle",Count=10,UserPin=true,PinStyle="Both"},
    {Name="switch_id",ControlType="Text",Count=10,UserPin=true,PinStyle="Both"},
    {Name="switch",ControlType="Button",ButtonType="Toggle",Count=10,UserPin=true,PinStyle="Both"},
    {Name="URL",ControlType="Text",Count=1,UserPin=true,PinStyle="Both"},
    {Name="API_KEY",ControlType="Text",Count=1,UserPin=true,PinStyle="Both"},
  }
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  layout   = {}
  graphics = {}
  -- Position Function
  
  -- Page Names Function
  PageNames={"Setup"}
  table.insert(PageNames,"Lights")
  table.insert(PageNames,"Switches")
  
  
  -- Color Lookup Table
  local Colors = {
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0},
    Yellow = {239,156,0},
    DarkGrey = {105,105,105}
  }
  
  
  CurrentArray = {}
  
  
  -- Local Variables
  --local CurrentPage=BuildPageNames()[props["page_index"].Value]
  local CurrentPage = PageNames[props["page_index"].Value]
  
  if CurrentPage=="Setup" then
    -- Version Number
    table.insert(graphics,{Type="Label",Text=string.format("Version %s",PluginInfo.Version),FontSize=9,Position={204,334},Size={76,12},HTextAlign="Right"})
    -- Logo
   -- table.insert(graphics,{Type="Image",Image=activuLogo,Position={4,4},Size={185,60}})
    -- Controls
    layout["URL"]={PrettyName="HA URL",Style="Text",Position={5,25},Size={185,16}}
    layout["API_KEY"]={PrettyName="HA API Key",Style="Text",Position={5,70},Size={185,16}}
    layout["GetServices"] = {Type= "Button",Legend="RELOAD",Position={5,100},Size={50,16}}
    -- Groupbox
  
    -- Text
    table.insert(graphics,{Type="Text",Text="Home Assistant URL:",Position={5,5},Size={185,16},FontSize=11})
    table.insert(graphics,{Type="Text",Text="HA API Key:",Position={5,50},Size={185,16},FontSize=11})
  
  elseif CurrentPage =="Lights"then
    table.insert(graphics,{Type="Label",Text=string.format("Version %s",PluginInfo.Version),FontSize=9,Position={204,334},Size={76,12},HTextAlign="Right"})
    local posY = 20
    for i = 1,10 do
      layout["light "..i] = {
        Type = "Button",
        PrettyName = "Lights~Buttons~Light "..i,
        --Legend = "LAYOUT "..i,
        Fill = {105,105,105},
        StrokeWidth = 1,
        CornerRadius = 2,
        --StrokeColor = Colors.Blue,
        Position = {5,posY},
        Size = {50,20},
        Font = "Roboto",
        --TextColor = Colors.Yellow
      }
      layout["light_id "..i] = {
        Type = "Text",
        Style = "ComboBox",
        PrettyName = "Lights~IDs~Light ID "..i,
        --Legend = "LAYOUT "..i,
        Fill = {105,105,105},
        StrokeWidth = 1,
        CornerRadius = 2,
        Position = {75,posY},
        Size = {200,20},
        Font = "Roboto",
        --TextColor = Colors.Yellow
      }
      posY = posY + 25
    end
  elseif CurrentPage =="Switches"then
    table.insert(graphics,{Type="Label",Text=string.format("Version %s",PluginInfo.Version),FontSize=9,Position={204,334},Size={76,12},HTextAlign="Right"})
    local posY = 20
    for i = 1,10 do
      layout["switch "..i] = {
        Type = "Button",
        PrettyName = "Switches~Buttons~Light "..i,
        --Legend = "LAYOUT "..i,
        Fill = {105,105,105},
        StrokeWidth = 1,
        CornerRadius = 2,
        --StrokeColor = Colors.Blue,
        Position = {5,posY},
        Size = {50,20},
        Font = "Roboto",
        --TextColor = Colors.Yellow
      }
      layout["switch_id "..i] = {
        Type = "Text",
        Style = "ComboBox",
        PrettyName = "Switches~IDs~Light ID "..i,
        --Legend = "LAYOUT "..i,
        Fill = {105,105,105},
        StrokeWidth = 1,
        CornerRadius = 2,
        Position = {75,posY},
        Size = {200,20},
        Font = "Roboto",
        --TextColor = Colors.Yellow
      }
      posY = posY + 25
    end
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  URL = Controls.URL
  API_KEY = Controls.API_KEY
  LIGHT = Controls.light
  LIGHT_ID = Controls.light_id
  SWITCH = Controls.switch
  SWITCH_ID = Controls.switch_id
  tick = 0
  TIMER = Timer.New()
  
  function done(tbl, code, d, e)
    --print( string.format("Response Code: %i\t\tErrors: %s\rData: %s",code, e or "None", d))
  end
  
  function StateUpdate(tbl, code, d, e)
    local data = qsc_json.decode(d)
    populateOptions(data)
    for k,o in ipairs(data) do
      for key,object in ipairs(LIGHT) do
        local control = LIGHT_ID[key]
        if o.entity_id == control.String and control.String ~= nil then
          if o.attributes.rgb_color ~= nil then
            local color = o.attributes.rgb_color
            object.Color = RGBtoHex(color)
          else
            object.Color = ""
          end
          if o.state == "on" then object.Boolean = true else object.Boolean = false end
        end
      end
      for key,object in ipairs(SWITCH) do
        local control = SWITCH_ID[key]
        if o.entity_id == control.String and control.String ~= nil then
          if o.state == "on" then object.Boolean = true else object.Boolean = false end
        end
      end
    end
  end
  
  
  function populateOptions(data)
    lightTable = {}
    switchTable = {}
    for key,object in ipairs(data) do
      if string.sub(object.entity_id, 1, 6) == "light." then
        table.insert(lightTable,object.entity_id)
      elseif string.sub(object.entity_id,1,7) == "switch." then
        table.insert(switchTable,object.entity_id)
      end
    end
    for key,object in ipairs(LIGHT_ID) do
      object.Choices = lightTable
    end
    for key,object in ipairs(SWITCH_ID) do
      object.Choices = switchTable
    end
  end
  
  function Upload(id,commandStr)
    ACCESS_TOKEN = API_KEY.String
    HttpClient.Upload {
      Url = "http://"..URL.String..":8123/api/services/"..commandStr,
      Method = "POST", -- Can be either POST, PUT, or PATCH. For PATCH, set Custom here, then define below
      Data = '{"entity_id":"'..id..'"}', -- This can be anything
      Auth = "basic",
      Headers = {
        ["Authorization"] = "Bearer "..ACCESS_TOKEN,
        ["Content-Type"] = "application/json"
      },
      EventHandler = done --(done) The function to call upon response
    }
    Timer.CallAfter(GetStates, 0.5)
  end
  
  function GetStates()
    ACCESS_TOKEN = API_KEY.String
    HttpClient.Download { 
      Url = "http://"..URL.String..":8123/api/states",
      Timeout = 30,
      Auth = "basic",
      Headers = {
        ["Authorization"] = "Bearer "..ACCESS_TOKEN,
        ["Content-Type"] = "application/json"
      },
      EventHandler = StateUpdate
    }
    tick = 0
  end
  
  function updateStates()
    tick = tick + 1
    if tick > 15 then 
      GetStates()
    end
  end
  
  
  for key,object in ipairs(LIGHT) do
    object.EventHandler = function()
      local commandStr = "light/turn_off"
      if object.Boolean then commandStr = "light/turn_on" end
      Upload(LIGHT_ID[key].String,commandStr)
    end
  end
  
  for key,object in ipairs(SWITCH) do
    object.EventHandler = function()
      
      local commandStr = "switch/turn_off"
      if object.Boolean then commandStr = "switch/turn_on" end
      Upload(SWITCH_ID[key].String,commandStr)
    end
  end
  
  function RGBtoHex(rgb)
    local hexadecimal = '#'
  	for key, value in pairs(rgb) do
  		local hex = ''
  		while(value > 0)do
  			local index = math.fmod(value, 16) + 1
  			value = math.floor(value / 16)
  			hex = string.sub('0123456789ABCDEF', index, index) .. hex			
  		end
  		if(string.len(hex) == 0)then
  			hex = '00'
  		elseif(string.len(hex) == 1)then
  			hex = '0' .. hex
  		end
  		hexadecimal = hexadecimal .. hex
  	end
  	return hexadecimal
  end
  
  Controls.GetServices.EventHandler = GetStates
  TIMER.EventHandler = updateStates
  TIMER:Start(1)
end
